// Microportal of selected pages (based on "Menu of subpages to these pages (with abstract)")
tt_content.tx_microportals_sel_pg < tt_content.menu.menu_abstract
tt_content {

  // microportal of selected pages
  menu_tx_microportals_sel_pg {
    special = list
    stdWrap.outerWrap >
    wrap = <div class="floatbox csc-menu csc-menu-microportal csc-menu-microportal-without-subpages"><div class="csc-textpic csc-textpic-center csc-textpic-above"><div class="csc-textpic-imagewrap">|</div></div><div class="csc-textpic-clear"><!-- --></div></div>
    1.itemArrayProcFunc = Int\Microportals\Utility\MenuUtility->removeNavTitleItemArrayProcFunc
    1.IProcFunc = Int\Microportals\Utility\MenuUtility->replaceATagMarkersInMenuPartsIProcFunc
    1.NO {
      wrapItemAndSub.cObject = COA
      wrapItemAndSub.cObject {

        // Render opening row div
        10 = TEXT
        10.value = <div class="csc-textpic-imagerow">
        10.if {
          equals = 1
          value.data = register:microportalColumnMod
        }

        20 = COA
        20 {
          10 = TEXT
          10.value = <div class="csc-textpic-imagecolumn

          20 = TEXT
          20 {
            value = csc-textpic-firstcol
            noTrimWrap = ^ ^^
            noTrimWrap.splitChar = ^
            if.value.data = register:microportalColumnMod
            if.equals = 1
          }

          21 = TEXT
          21 {
            value = csc-textpic-lastcol
            noTrimWrap = ^ ^^
            noTrimWrap.splitChar = ^
            if.isFalse.data = register:microportalColumnMod
          }

          30 = TEXT
          30 {
            value = "><div class="csc-textpic-image
          }

          40 = TEXT
          40 {
            value = no-image
            noTrimWrap = ^ ^^
            noTrimWrap.splitChar = ^
            if.isFalse.field = tx_microportals_portalimage
          }

          60 = TEXT
          60.value = " style="width:{register:microportalItemWidth}px;">
          60.insertData = 1
        }

        30 = TEXT
        30.value = |</div></div>

        40 = COA
        40 {

          // Render closing div if row was full
          10 = TEXT
          10.value = </div>
          10.if.isFalse.data = register:microportalColumnMod

          // If the last row of the microportal was not filled
          // render the closing div
          stdWrap.ifEmpty = </div>
          stdWrap.ifEmpty.if {
            equals.data = register:count_menuItems
            value.data = register:count_MENUOBJ
          }
        }

        50 = RESTORE_REGISTER

      }

      linkWrap = <h2>|</h2>

      before.cObject = COA
      before.cObject {

        5 = LOAD_REGISTER
        5 {
          microportalColumns.cObject = TEXT
          microportalColumns.cObject {
            value = {$styles.content.simpleimages.maxNumberOfColumns}
            override.data = register:image_columns
            override.override = {$styles.content.mobile.maxNumberOfColumns}
            override.override.if.isTrue.data = register:mobile_version
          }

          microportalColumnMod.cObject = TEXT
          microportalColumnMod.cObject {
            cObject = TEXT
            cObject {
              value = {register:count_MENUOBJ} % {register:microportalColumns}
              insertData = 1
            }

            prioriCalc = 1
          }

          microportalTotalWidth.cObject = TEXT
          microportalTotalWidth.cObject {
            cObject = COA
            cObject {
              10 = TEXT
              10.value = {$styles.content.imgtext.maxW}
              10.override.data = register:image_width
              10.override.override = {$styles.content.mobile.maxWidth}
              10.override.override.if.isTrue.data = register:mobile_version
              20 = TEXT
              20.value = + {$styles.content.equalHeightFrame.additionalWidth}
            }

            prioriCalc = intval
          }

          microportalItemWidth.cObject = TEXT
          microportalItemWidth.cObject {
            cObject = TEXT
            cObject {
              value = ( ###max_total_width### - ((###columns### - 1) * ({$styles.content.imgtext.colSpace}) ) ) / ###columns###
              replacement.10 {
                search = ###columns###
                replace.data = register:microportalColumns
              }

              replacement.20 {
                search = ###max_total_width###
                replace.data = register:microportalTotalWidth
              }
            }

            prioriCalc = intval
          }

          microportalImageHeight.cObject = TEXT
          microportalImageHeight.cObject {
            prioriCalc = intval
            cObject = COA
            cObject {
              10 = TEXT
              10.value = {register:microportalItemWidth} *
              10.insertData = 1
              20 = TEXT
              20.value = {$styles.content.equalHeightFrame.aspectRatio}
              20.override = {$styles.content.microportals.imageAspectRatio}
            }
          }
        }

        10 = COA
        10 {
          if.value = {$styles.content.microportals.default.imagePosition}
          if.equals = before

          10 = FILES
          10 {
            references {
              fieldName = tx_microportals_portalimage
            }

            renderObj = IMAGE
            renderObj {

              file {

                import.data = file:current:uid
                treatIdAsReference = 1

                width = {register:microportalItemWidth}c
                width.insertData = 1

                height = {register:microportalImageHeight}c
                height.insertData = 1
              }

              altText.data = file:current:alternative
              titleText.data = file:current:title
            }

            stdWrap.wrap = <div class="single-image-wrapper">###ATag_begin###|###ATag_end###</div>
            stdWrap.required = 1
          }
        }
      }

      after >
      after.cObject = COA
      after.cObject {

        10 < tt_content.menu.20.tx_microportals_sel_pg.1.NO.before.cObject.10
        10.if.equals = after

        20 = COA
        20 {

          stdWrap.wrap = <div class="csc-textpic-caption">|</div>
          stdWrap.required = 1

          10 = TEXT
          10 {
            data = field: tx_microportals_portalteaser
            wrap = <div class="abstract">|</div>
            required = 1
          }

          20 = TEXT
          20 {
            value = mehr
            wrap = <div class="more-link">###ATag_begin###|###ATag_end###</div>
            if.isTrue = {$styles.content.microportals.default.enableMoreLink}
          }
        }
      }
    }
  }

  // Microportal of subpages of selected pages
  menu_tx_microportals_sel_subpg < .tx_microportals_sel_pg
  menu_tx_microportals_sel_subpg.special = directory

  // Microportal with subpages
  menu_tx_microportals_sel_pg_wsub < .tx_microportals_sel_subpg
  menu_tx_microportals_sel_pg_wsub {
    wrap = <div class="floatbox csc-menu csc-menu-microportal csc-menu-microportal-with-subpages"><div class="csc-textpic csc-textpic-center csc-textpic-above"><div class="csc-textpic-imagewrap">|</div></div><div class="csc-textpic-clear"><!-- --></div></div>
    special = list
    1 {
      expAll = 1
      NO {
        // closing tx-microportal-image-and-subnav div
        wrapItemAndSub.cObject.30.value = |</div></div></div>

        // since we always have a (dummy) image we do not need
        // the no-image class here
        wrapItemAndSub.cObject.20.40 >

        // the image will always be rendered AFTER the heading
        before.cObject.10 >

        // when a special aspect ratio for microportals with subpages was defined
        // in the constants we overwrite the current value with the constant value
        before.cObject.5.microportalImageHeight.cObject.cObject.20.stdWrap.override = {$styles.content.microportals.imageAspectRatioWithSubnav}

        after.cObject {

          // wrap the image and the subnavigation in a seperate div
          7 = TEXT
          7.value = <div class="tx-microportal-image-and-subnav">

          // when no portal image was set for a page a dummy image is
          // set for a page a dummy image will be used
          10 {
            if >
            10 {
              stdWrap.required = 0
              stdWrap.ifEmpty.postCObject = IMAGE
              stdWrap.ifEmpty.postCObject.file = {$styles.content.microportals.withSubnav.dummyImage}
              stdWrap.ifEmpty.postCObject.file {
                width = {register:microportalItemWidth}c
                width.insertData = 1
                height = {register:microportalImageHeight}c
                height.insertData = 1
              }
            }
          }

          // we will have no teaser text / more link
          20 >
        }
      }
    }
  }
}

[userFunc = user_ufutils_displayMobileVersion]
[else]
  // if we are NOT in the mobile version we display the second level
  // navigation in the microportal with subpages
  menu_tt_content.menu.20.tx_microportals_sel_pg_wsub.2 = TMENU
  menu_tt_content.menu.20.tx_microportals_sel_pg_wsub.2 {
    wrap = <ul>|</ul>
    NO.wrapItemAndSub = <li>|</li>
  }
[global]
